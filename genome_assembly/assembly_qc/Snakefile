import os

############################
###                      ###
### Setting up variables ###
###                      ###
############################

# Detect the first directory in the busco_downloads/lineages/ folder
lineage_dir = sorted(os.listdir("busco_downloads/lineages/"))[0]

configfile: "bin/config/config.yml"

# Automatically detect sample names from assemblies
assemblies = glob_wildcards("data/assemblies/{sample}.fa").sample

# Read configuration values
taxid = config['taxid']
gxdb = config['gxdb']


#################################################
###                                           ###
### Main rule to collect output from the rest ###
###                                           ###
#################################################

# Rule all - collects all targets
rule all:
    input:
        "tmpdir/reads_kmer_db",
        "data/reads/reads.fq",
        "contaminant_screening_done.flag",
        expand("inspector_report/{sample}", sample=assemblies),
        expand("kmer_report/{sample}/{sample}.spectra-asm.fl.png", sample=assemblies),
        expand("busco_report/{sample}", sample=assemblies)


########################
###                  ###
### Individual rules ###
###                  ###
########################

# Rule fasta2fastq - convert .fa reads to .fq format
rule fasta2fastq:
    input:
        reads=config['reads'] 
    output:
        reads="data/reads/reads.fq"  
    conda:
        "bin/config/assembly_qc.yml"
    params: "-F '#'"
    shell:
        """
        seqtk seq {params} {input.reads} > {output.reads}
        """

# Rule read_kmer - process reads for kmer counting
rule read_kmer:
    input:
        reads="data/reads/reads.fq"
    output:
        directory("tmpdir/reads_kmer_db")
    log:
        "logs/read_kmer_reads.log"
    params:
        "k=27 count"
    conda:
        "bin/config/assembly_qc.yml"
    shell:
        "(meryl output {output} {params} {input.reads}) 2> {log}"

# Rule busco - run BUSCO on assemblies
rule busco:
    input:
        "data/assemblies/{assemblies}.fa"
    output:
        directory("busco_report/{assemblies}")
    log:
        "logs/busco_{assemblies}.log"
    threads: 30
    params: "-m geno -l busco_downloads/lineages/metazoa_odb10"
    conda:
        "bin/config/assembly_qc.yml"
    shell:
        "(busco -i {input} -o {output} -c {threads} {params}) 2> {log}"

# Rule assembly_kmer - compare read kmer with assembly
rule assembly_kmer:
    input:
        assembly="data/assemblies/{assemblies}.fa",
        read_db="tmpdir/reads_kmer_db"
    output:
        "kmer_report/{assemblies}/{assemblies}.spectra-asm.fl.png"
    conda:
        "bin/config/assembly_qc.yml"
    shell:
        """
        mkdir -p kmer_report/{wildcards.assemblies} && cd kmer_report/{wildcards.assemblies}
        merqury.sh ../../{input.read_db} ../../{input.assembly} {wildcards.assemblies}
        """

# Rule inspector - perform inspector analysis on reads and assembly
rule inspector:
    input:
        assembly="data/assemblies/{assemblies}.fa",
        reads="data/reads/reads.fq"  
    output:
        directory("inspector_report/{assemblies}")
    log:
        "logs/inspector_{assemblies}.log"
    threads: 30
    params:
        dtype="--datatype hifi"
    conda:
        "bin/config/inspector.yml"
    shell:
        "inspector.py -c {input.assembly} -r {input.reads} -o {output} -t {threads} {params.dtype}"

# Rule contaminant_screening - run contaminant and vector screening for all assemblies
rule contaminant_screening:
    input:
        assemblies=expand("data/assemblies/{sample}.fa", sample=assemblies)
    output:
        "contaminant_screening_done.flag"  # Use a flag file to indicate completion
    log:
        "logs/contaminant_screening.log"
    params:
        working_dir="./",
        taxid=taxid,
        tools="bin/scripts/",
        db=gxdb
    shell:
        """
        bash bin/scripts/contaminant_screening.sh {params.working_dir} "{input.assemblies}" {params.taxid} {params.tools} {params.db} 2> {log}
        """
