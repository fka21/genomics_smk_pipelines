configfile: "bin/config/config.yml"

import os
import glob

# Define sample names dynamically based on available files
def get_samples():
    samples = []
    for ext in ["*.fa", "*.fq", "*.fq.gz", "*.fastq", "*.fastq.gz"]:
        samples += [os.path.splitext(os.path.basename(f))[0] for f in glob.glob(f"data/reads/{ext}")]
    return list(set(samples))

sample = get_samples()

# Rule all: Define the final outputs
rule all:
    input:
        expand("genomescope_report/{sample}", sample=sample),
        expand("kmer_histograms/{sample}_hetkmers.dump", sample=sample),
        expand("kmer_histograms/{sample}_summary_table.tsv", sample=sample),
        expand("kraken2_report/krona_report/{sample}.html", sample=sample),
        expand("nanoplot_report/{sample}", sample=sample)

def dynamic_input(wildcards):
    sample_name = wildcards.sample.rsplit('.', 1)[0]  # Remove file extension if present
    for ext in [".fa", ".fq", ".fq.gz", ".fastq", ".fastq.gz"]:
        file_path = f"data/reads/{sample_name}{ext}"
        if os.path.exists(file_path):
            return file_path
    raise FileNotFoundError(f"No valid input file found for sample {sample_name}")

rule fasta2fastq:
    input:
        reads=dynamic_input
    output:
        reads="data/reads/{sample}.fq"
    conda:
        "bin/config/kmer.yml"
    params: "-F '#'"
    shell:
        """
        if [[ "{input.reads}" == *.fq || "{input.reads}" == *.fq.gz || "{input.reads}" == *.fastq || "{input.reads}" == *.fastq.gz ]]; then
            cp {input.reads} {output.reads}
        else
            seqtk seq {params} {input.reads} > {output.reads}
        fi
        """

rule kmer_counter:
    input:
        reads="data/reads/{sample}.fq"
    output:
        output_dir=directory("kmer_counter/{sample}")
    log:
        "logs/kmer_counter_{sample}.log"
    conda:
        "bin/config/kmer.yml"
    threads: 40
    params:
        args="-k27 -m128",
        tmp=temp("tmpdir_kmer")
    shell:
        """
        mkdir -p {output.output_dir} && cd {output.output_dir}
        mkdir -p {params.tmp}
        kmc {params.args} -t{threads} ../../{input.reads} {wildcards.sample} {params.tmp}
        """

rule kmer2hist:
    input:
        "kmer_counter/{sample}"
    output:
        histo="kmer_histograms/{sample}.hist"
    conda:
        "bin/config/kmer.yml"
    params:
        operation1="transform",
        operation2="histogram",
        maxcov="-cx10000"
    shell:
        """
        kmc_tools {params.operation1} {input}/{sample} {params.operation2} {output.histo} {params.maxcov}
        """

rule smudgeplot:
    input:
        hist="kmer_histograms/{sample}.hist",
        kmerdb="kmer_counter/{sample}"
    output:
        dump="kmer_histograms/{sample}_hetkmers.dump",
        sumtbl="kmer_histograms/{sample}_summary_table.tsv"
    conda:
        "bin/config/kmer.yml"
    params:
        kmer="-k 27",
        output_pattern="{sample}",
        output_dir="kmer_histograms/{sample}"
    shell:
        """
        L=$(smudgeplot.py cutoff {input.hist} L)
        U=$(smudgeplot.py cutoff {input.hist} U)
        kmc_tools transform {input.kmerdb}/{sample} -ci"$L" -cx"$U" dump -s {output.dump}
        smudgeplot.py hetkmers -o {output.dump} < {output.dump}
        smudgeplot.py plot {params.kmer} -o {params.output_dir} {output.dump}_coverages.tsv
        """

rule genomescope:
    input:
        histo="kmer_histograms/{sample}.hist"
    output:
        directory("genomescope_report/{sample}")
    log:
        "logs/genomescope_{sample}.log"
    conda:
        "bin/config/kmer.yml"
    shell:
        """
        cd bin/workflow/scripts/genomescope2.0/
        Rscript install.R
        cd ../../../../
        genomescope.R -i {input.histo} -o {output}
        """


rule contamination_evaluation:
    input:
        reads=dynamic_input
    output:
        kraken2="kraken2_report/{sample}.output.txt",
        kraken2_report="kraken2_report/{sample}.report.txt",
        krona="kraken2_report/{sample}.krona_input.txt"
    log:
        "logs/kraken2_{sample}.log"
    conda:
        "bin/config/kraken2.yml"
    params:
        db=config['db']
    threads: 40
    shell:
        """
        kraken2 --db {params.db} --threads {threads} --output {output.kraken2} --report {output.kraken2_report} {input}
        cut -f 2,3 {output.kraken2} > {output.krona}
        """

rule contamination_visualisation:
    input:
        "kraken2_report/{sample}.krona_input.txt"
    output:
        "kraken2_report/krona_report/{sample}.html"
    log:
        "logs/krona_{sample}.log"
    conda:
        "bin/config/kraken2.yml"
    shell:
        """
        ktUpdateTaxonomy.sh
        ktImportTaxonomy -o {output} {input}
        """

rule nanoplot:
    input:
        reads=dynamic_input
    output:
        outdir=directory("nanoplot_report/{sample}")
    conda:
        "bin/config/nanoplot.yml"
    threads: 40
    params:
        "--dpi 300 --format 'pdf'"
    shell:
        """
        NanoPlot --fasta {input} --outdir {output.outdir} --threads {threads}
        """
